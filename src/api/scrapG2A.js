const newman = require('newman');
const fs = require('fs');

// array de cookies para utilizar en las llamadas
let cookies = ["YAAQIFUQYGjZNbaUAQAA8ejg2wII/b+CZoLMaoy7V3u1zOuJQinVs+C/Snqc4goUMXOniMsxsVqwBjnfOr7/BH8tZR3wZL6Q0CLL0BAl3mgk46LXS5lVKB4f8SALG4BCBI6gI7xLpgV1T/jQR41pq/pqKYXakWMU0NVIoS/0s0J07V3F7O4c3bENtWzFmCk6AaRogZVBkFZhSPnp2cCC3eqiRE6hmB9AlI1lI9PSny7LxA7u0ytXgS/G0JwGyITltQhu4B5BGyGH9rCmDjd2Oss8z4hjr/J5Zmemm0GNu4ALPwvc+SQukXO7U5S7i/mlU1g/2VMGxP79PrFRWUVOCEURsp7iDCmF30fvXtlbhLG23KQvAXNtupeEaQPvWz8el0QYuoC6zgfhTtQe8UPyN9tPUitRVeW+3nWXfyBNwH6y+RTLFfqgeifjxHS0/Jt+wykPu1irTGma; _abck=A70B1A1372DB523C7CD759C6BED9AF24~-1~YAAQIFUQYB7Qb7eUAQAAElUk5Q0r7L3yqvTjIWNGCUnwBiKe80R/OWr3fjCtSOXaeXB0ofEY0pF2nRDxAcfcSi5H4i+0YivMma2Nz2vWF0TPlAqCNGxarISUWZ4mN2vE+sjR5Peo5rClwXiDLnSgZZNTNijlnm5zVAFOv/rshRINm+63+we5yhH/TfRQofzNvVlFiztqLlAbgEb3vMsDHp6MOlrQjZ4JDnN1VoELu5EVDRXOwxz8gDWqkYj9i70XNuybz7Vy+Uee7+UBX08T/w75nurOADaKSiNK202X0rIfiAvhW30ZOp/KpAhN1avDV3sRBq8p2AjLsTbXaaeFjdKIqMAbYcSty4lFDLD32pKHqcxsV/Yc8XRm7ZeWsw6+QW0+chVfFMvCRi+joOztlT2hK9iBugEph/CkckvhJbMym7zleZq8rw3uDzHsQa8hIxiKpw==~-1~-1~-1; bm_s=YAAQIFUQYGbHcreUAQAA/fI15QJD6c4WXyWvdW28zhzSPjWzsmXoTP1VViqQ63NQXkFTWYrLoJ+MDEXsLptGrQCR/BPjMgSCm1THW1gfSYC0RX0vljRhG0t9bEZyr0q8w/7Lmtrf5mg0ZjDNu9+jU0GFdgLZQEv5KsOdNbeO3I4NtSRPFBZyXDDlFxoA4FexQWXUOpT3VaxvB4Y+4En6uU+XvDMw3hdPMkVZS578llFlc+7txejZw21CEYzOquL+QUuIdYKvg0WVQD5HJt2UArpqhx31dwgYftvqacdeMVVC/8xBNhsyiwpXOwnzIZYvUuBQVfSMSuaJID9ieJrvmzHDJAQOIGddia5zO8+zpOOcWb6bQs/7IOI6XrOfD0djLFRyd3Ti6q3PS1iWqaR5Xj8XwMQLxEjHevYCT5yhB6kyr/EDmiFzurB2yAvnDyultkb51MgHDuIL; bm_ss=ab8e18ef4e; bm_sz=0A43C08A3CED426C3929BEDB50F4E547~YAAQIFUQYGfHcreUAQAA/fI15RpnMsBgzqUZjwHYoawVO2KUGavH+rPQOz/IyR05IIG7LlW979PpBQeLuyKKIrzxlsW7WskXHa1wmsoLoHurUdCHMjreyFxs/kvVpTKYL69pRA5IdpyT7ixtn0p8LLFn7l8ZPi9aj7UPII97uO68b/StdZQ55kKy3UfVyrK2JHiRzx+UrMVxtJ40XUFKWrP0CUK9akqdiCJ0IeagNOAbquVRU9HBNc8H8k1x2U4uvqqNigOKK4q2ehntKVtAr6ts2L+LbZeZgCdE4lDqvfldAPYTT74nHvl5DkMh9/oQYeq4BwX2DzJw5fi8RQ2FcK3+/Zx7FzLS8aA21n1f9A0nVIHNLtHn2yjr7ulrKMO1D+gyfIbo8xjYFpcjGwC/kQZagkUmaYPVB4Ep0diAkBOhJvxkM9lCgBjx2G2cpyPYjLDYEmwWT+E=~3159107~3752502",
    "YAAQIFUQYGjZNbaUAQAA8ejg2wII/b+CZoLMaoy7V3u1zOuJQinVs+C/Snqc4goUMXOniMsxsVqwBjnfOr7/BH8tZR3wZL6Q0CLL0BAl3mgk46LXS5lVKB4f8SALG4BCBI6gI7xLpgV1T/jQR41pq/pqKYXakWMU0NVIoS/0s0J07V3F7O4c3bENtWzFmCk6AaRogZVBkFZhSPnp2cCC3eqiRE6hmB9AlI1lI9PSny7LxA7u0ytXgS/G0JwGyITltQhu4B5BGyGH9rCmDjd2Oss8z4hjr/J5Zmemm0GNu4ALPwvc+SQukXO7U5S7i/mlU1g/2VMGxP79PrFRWUVOCEURsp7iDCmF30fvXtlbhLG23KQvAXNtupeEaQPvWz8el0QYuoC6zgfhTtQe8UPyN9tPUitRVeW+3nWXfyBNwH6y+RTLFfqgeifjxHS0/Jt+wykPu1irTGma; _abck=A70B1A1372DB523C7CD759C6BED9AF24~-1~YAAQIFUQYK7JqLeUAQAAeWN15g2YBycttfKHP1vxUQldTHCXhqz/BuOyZaG2F9s4jDE/ut4/8vYo/N+ZFU67ZpiIQcmfUxLIMTxl+aDt5n+az7Y0MDnWcDWAkbPYjwYHCqhVt4H91g+f64GOPOHflZJ+7WL7j8PXtfFYRktb+8W4pA1A3vgj45FoLyb37scgVDM2FvhQW2OKOhl1YAYKS2yns5c2Tpsb3YZNYPFCJ5nDZVARYaF6WsQKfx8mkz7Icb989qgKehfj8OnPNhLSfPjVKFx5tVp+TvWW220Ln2VdcZnz1JE4o+GnF7SIXaw6mmWXq19HBB5Bn+pG6DROuPgWPEtMJuUIdhXDNgMuC7h1GAAOKZfU/S+W2DkLNEg5FjaVoL9IJluvJKNu6cycMAIDGyMO6kPrIQv2H8ArR3TNUlgoL+rmKApznwwliMgl++JOYA==~-1~-1~-1; bm_s=YAAQIFUQYK/JqLeUAQAAeWN15gLRNcp8NT7+fl++WjZbC5lvnNs2+1MWgd34TwsTG0c1nO3lwSxPTM+Z0ANtQFYKMg8Z2REhUmGBkOzQkhVtKXr7Ie0AnkOSSxKBw7IM99DjEVc6Sra3o37NE/u/wx+By9MH+bWs2DgutsJUaITl1n0SKOEzGap7oQ6Zht0+Gz0Y5USbQNkCs84fltBhdex3UTeByQM9fCJ2jshIeRQLGoZHmW1qDP6EeU8zeGRm3wUOa4qY2rf/IeDFx1y/PnCvExYZgnc3N+Goq5hnq7JSDzRrQXZ+TGfZ2bzBK7b5Ve5gNwzGI5YOLstOsNsrRViYiXPEnx8FhDHe7ddkqi0SheAn7+yl9dMOVW6nVkGIrwXX7FUSZ+9K/mdk2zHnXUeqDKYtPL1CTkYfN/G3IfQ7jbIQhVDlcX6pifHYMs/UWCqY1SBKIaN0; bm_sz=5F001F09DBC38E2D43B4EE468AE40716~YAAQIFUQYLDJqLeUAQAAeWN15hp0uKIC0eu4oKFbpddlxnf/ZyF8EQngoKuFxj1KlfN3qSOlfZ5+s66jMaHRXSq4U/U+ixP7KY5FudNqzheURnbwkYI+fZC1pSi8wnP9+4t7kiGmIbOGNiEYoVcm9blEfxV/Nd08TH87J3r0P/9eGNG0EuM+1wRUi++cAK6yD/V1heDRSg+TQXcpBfXIziuFWq5DW5HpoM899Ibju0D3iS+XFbr1Kuxw/uP2dUMdOQYyOXxDMqM6YeAhQvHX5wxswwNUIRW9yIzpSE22MLiBwP7N/0WTFtJpOwLabkHK3QC5IhqsCC8V2juNgjqMkbFGQkK/pajxOzxItv1uC9S0zSQ5tSghGLfsY6qgrQ/R9wg=~4600900~3749185",
    "YAAQIFUQYGjZNbaUAQAA8ejg2wII/b+CZoLMaoy7V3u1zOuJQinVs+C/Snqc4goUMXOniMsxsVqwBjnfOr7/BH8tZR3wZL6Q0CLL0BAl3mgk46LXS5lVKB4f8SALG4BCBI6gI7xLpgV1T/jQR41pq/pqKYXakWMU0NVIoS/0s0J07V3F7O4c3bENtWzFmCk6AaRogZVBkFZhSPnp2cCC3eqiRE6hmB9AlI1lI9PSny7LxA7u0ytXgS/G0JwGyITltQhu4B5BGyGH9rCmDjd2Oss8z4hjr/J5Zmemm0GNu4ALPwvc+SQukXO7U5S7i/mlU1g/2VMGxP79PrFRWUVOCEURsp7iDCmF30fvXtlbhLG23KQvAXNtupeEaQPvWz8el0QYuoC6zgfhTtQe8UPyN9tPUitRVeW+3nWXfyBNwH6y+RTLFfqgeifjxHS0/Jt+wykPu1irTGma; _abck=A70B1A1372DB523C7CD759C6BED9AF24~-1~YAAQIFUQYK7JqLeUAQAAeWN15g2YBycttfKHP1vxUQldTHCXhqz/BuOyZaG2F9s4jDE/ut4/8vYo/N+ZFU67ZpiIQcmfUxLIMTxl+aDt5n+az7Y0MDnWcDWAkbPYjwYHCqhVt4H91g+f64GOPOHflZJ+7WL7j8PXtfFYRktb+8W4pA1A3vgj45FoLyb37scgVDM2FvhQW2OKOhl1YAYKS2yns5c2Tpsb3YZNYPFCJ5nDZVARYaF6WsQKfx8mkz7Icb989qgKehfj8OnPNhLSfPjVKFx5tVp+TvWW220Ln2VdcZnz1JE4o+GnF7SIXaw6mmWXq19HBB5Bn+pG6DROuPgWPEtMJuUIdhXDNgMuC7h1GAAOKZfU/S+W2DkLNEg5FjaVoL9IJluvJKNu6cycMAIDGyMO6kPrIQv2H8ArR3TNUlgoL+rmKApznwwliMgl++JOYA==~-1~-1~-1; bm_s=YAAQIFUQYGDJvbeUAQAArIDr5gJ+1judcENUVHVKBQ6NM7IwdmIYjsXtbLBF3wd/olMkpPAarbuwzrqFFp+9hU5x7Uj7etOPlvVitSzIsT7nGBcjTn8OZhhIGA1rdW612WelzEXPOpap1Fyd8paa7A8icoaIN4mACZdrcO610/6yyV44Ysoj0OtRK5IcdlRxC7rDsJG1UmGTqH7ePbHOz2ssS1SzTCrTafsl1Iu0Xa0I6KcqzczxAAMwkZu+gixyLKd23b0uB4cbLW8vxPWzrSF/UCGvmUPKeS9Jfi39asQdFZ93Iq9TxUjaKpnyzmGCXQkkXBl5LulSahwIAdoY7+GctbSFVtjPPSS+4f6xa2eL5XPP4xzcBz2ei9S1+Gpf0jT2P9hot8Dc4KGyIB4zrqV4KoD+86GOswEnjEXUk1YObmeh9ORL8rZz8uokuXigioP5eix1UxP9; bm_ss=ab8e18ef4e; bm_sz=5F001F09DBC38E2D43B4EE468AE40716~YAAQIFUQYGHJvbeUAQAArIDr5hpLUivYAmTrwEz1JI8a/CDJtI//10ViwM91wlBTxK0kOhUg/BP2yqK0MNQhUi6mIYvVKaF1gGj4z6SC2eI3qqoUCBKRxslxjAyI3OE4RltN5Yt12zIU3ZJCwaA6Ch5wpTuOwmmI8l4eAnj+Vy8eAowK8CzUfhhuchrhpEv5ak69e48B2wP+7Djiprh1mBS4OdXJYhljQ+g++RknVAwexS3LUdxl4NH1k+ScNImvoZT31XyOfVICvE7U9ZAe9Jc+bJz7LpvRBrRLO0LFqioQMPQ9i16a5JOBVAvQvNsgSPOjq33fdl6ALikmjG4fvZhG/MWmF1IgD+CeDgaVIucNaQHDccWQRKdgvjuVygE4bNptXz97NU+Jgp3Nvw==~4600900~3749185",
    "YAAQIFUQYGjZNbaUAQAA8ejg2wII/b+CZoLMaoy7V3u1zOuJQinVs+C/Snqc4goUMXOniMsxsVqwBjnfOr7/BH8tZR3wZL6Q0CLL0BAl3mgk46LXS5lVKB4f8SALG4BCBI6gI7xLpgV1T/jQR41pq/pqKYXakWMU0NVIoS/0s0J07V3F7O4c3bENtWzFmCk6AaRogZVBkFZhSPnp2cCC3eqiRE6hmB9AlI1lI9PSny7LxA7u0ytXgS/G0JwGyITltQhu4B5BGyGH9rCmDjd2Oss8z4hjr/J5Zmemm0GNu4ALPwvc+SQukXO7U5S7i/mlU1g/2VMGxP79PrFRWUVOCEURsp7iDCmF30fvXtlbhLG23KQvAXNtupeEaQPvWz8el0QYuoC6zgfhTtQe8UPyN9tPUitRVeW+3nWXfyBNwH6y+RTLFfqgeifjxHS0/Jt+wykPu1irTGma; _abck=A70B1A1372DB523C7CD759C6BED9AF24~-1~YAAQIFUQYK7JqLeUAQAAeWN15g2YBycttfKHP1vxUQldTHCXhqz/BuOyZaG2F9s4jDE/ut4/8vYo/N+ZFU67ZpiIQcmfUxLIMTxl+aDt5n+az7Y0MDnWcDWAkbPYjwYHCqhVt4H91g+f64GOPOHflZJ+7WL7j8PXtfFYRktb+8W4pA1A3vgj45FoLyb37scgVDM2FvhQW2OKOhl1YAYKS2yns5c2Tpsb3YZNYPFCJ5nDZVARYaF6WsQKfx8mkz7Icb989qgKehfj8OnPNhLSfPjVKFx5tVp+TvWW220Ln2VdcZnz1JE4o+GnF7SIXaw6mmWXq19HBB5Bn+pG6DROuPgWPEtMJuUIdhXDNgMuC7h1GAAOKZfU/S+W2DkLNEg5FjaVoL9IJluvJKNu6cycMAIDGyMO6kPrIQv2H8ArR3TNUlgoL+rmKApznwwliMgl++JOYA==~-1~-1~-1; bm_s=YAAQIFUQYBjMvbeUAQAABpDr5gLR5jKpOeW0ZG3wItZFL3EV05TsWOxxtmvYJH0tZJHeqSv7OC13IJhCiF7vJsHApiYSuhlTvlWL9ljOmwMeykgMjE6MsZhVjV3Xi6R+Vy4+mlVFFvUYvrLOBY0jV37ad+mfOlNv+NXN2GFrSKxXJO+CUXiPVeK0K+D0dotmx4HgOZrBKymmpmStpe8s8VsaXnZU7mQVsPqWVSTnJ4twNtNgemmYjmVg/vs8vRc2lZa6aby2F4shMcLF8MBEOXjcLr58vr9UnBmSVRLQGlAmhwXaZ7vrgc2KIDRy8XHW0dj/jiJiNJUadYaAiwMyTKBtGrYKjgj01q9Pbl5CqS0Je9p5NYf0DhJ6XderRPM1b6oznUAbInYuHKNvn63qL2AqzyCADEu+etC5NKidLw7LO7M3ORGXRy2Bq7KjM3q4pf8y6XkUCjqs; bm_ss=ab8e18ef4e; bm_sz=5F001F09DBC38E2D43B4EE468AE40716~YAAQIFUQYBnMvbeUAQAABpDr5hoN1B1Sy7UsrDOqKkdQ4j1wZgVhjrrFx3pG7txRneOPqa59fphZi7MTgJ0UnoUbgTxv8jB0NtVrrT5xWVGe0yzsAc6TCOVAFD641ojZ5NXQzR6pVFB/WjQNfUpbGAnqNsNyieFTLH6Ncq7I0vL2wUVynE3pRuoAGWCAP1amx1lL7iK9L0XvQKNYpzgvYKGunifyjo17WihnUz7hwoZmo06GhVw7lXHFe9gWuDl2qMce3F1Hmp7gLrmguZSlnvTj23JLq3qd+ZU1F4VmSns4+cdpyB568wYiMLD/PXqcM9WPI8RIcYC/6Wv6qpTHrSOOVzngrj9eDBtH/GBo+n/ivzTNACu2q8M5u15NYmRa20FGTWMCORZY4pHt88BMKoXM~4600900~3749185",
    "YAAQIFUQYGjZNbaUAQAA8ejg2wII/b+CZoLMaoy7V3u1zOuJQinVs+C/Snqc4goUMXOniMsxsVqwBjnfOr7/BH8tZR3wZL6Q0CLL0BAl3mgk46LXS5lVKB4f8SALG4BCBI6gI7xLpgV1T/jQR41pq/pqKYXakWMU0NVIoS/0s0J07V3F7O4c3bENtWzFmCk6AaRogZVBkFZhSPnp2cCC3eqiRE6hmB9AlI1lI9PSny7LxA7u0ytXgS/G0JwGyITltQhu4B5BGyGH9rCmDjd2Oss8z4hjr/J5Zmemm0GNu4ALPwvc+SQukXO7U5S7i/mlU1g/2VMGxP79PrFRWUVOCEURsp7iDCmF30fvXtlbhLG23KQvAXNtupeEaQPvWz8el0QYuoC6zgfhTtQe8UPyN9tPUitRVeW+3nWXfyBNwH6y+RTLFfqgeifjxHS0/Jt+wykPu1irTGma; _abck=A70B1A1372DB523C7CD759C6BED9AF24~-1~YAAQIFUQYK7JqLeUAQAAeWN15g2YBycttfKHP1vxUQldTHCXhqz/BuOyZaG2F9s4jDE/ut4/8vYo/N+ZFU67ZpiIQcmfUxLIMTxl+aDt5n+az7Y0MDnWcDWAkbPYjwYHCqhVt4H91g+f64GOPOHflZJ+7WL7j8PXtfFYRktb+8W4pA1A3vgj45FoLyb37scgVDM2FvhQW2OKOhl1YAYKS2yns5c2Tpsb3YZNYPFCJ5nDZVARYaF6WsQKfx8mkz7Icb989qgKehfj8OnPNhLSfPjVKFx5tVp+TvWW220Ln2VdcZnz1JE4o+GnF7SIXaw6mmWXq19HBB5Bn+pG6DROuPgWPEtMJuUIdhXDNgMuC7h1GAAOKZfU/S+W2DkLNEg5FjaVoL9IJluvJKNu6cycMAIDGyMO6kPrIQv2H8ArR3TNUlgoL+rmKApznwwliMgl++JOYA==~-1~-1~-1; bm_s=YAAQIFUQYOrNvbeUAQAAX53r5gKyxOQu/EDE5jafGT2TxjU/KnL1ZyNZASxNCHm2iI1qjeB6Vfde+dfKeefnz0rX2yAq8PTO1+nckOVOEhlV/NDegCsOAZ+fy2MhlYFx18c9K66FgzItk/viJPIDqm5hNcx92e0oW/++ZBII9DCUedzAvclvQWcOdeD0Kpvgo+0qjw/shcVS70g2WRaW/XftN5ZKd8rNbrrFM17EBZMz4HibFDEg2mohYF+VqmcunGMldKQKZKYAQ9jqB+lrr2chBdLIWs16OrGvIEfNOOmXiHCzSPbemEOR/A1iU3qF7bor3hqTAYaN4NnciAjK0HW4LgPdt9TOG04JAZ/IU5ZeDcK8u/xFJ3wjG/E3KeYMIsmo7r9QUePdFR6hJbCu9kYesrNj319AB5LU75HDm7tNbjNG1q+IBbkL2D4Shmb/tVEJvT2mpNqu; bm_ss=ab8e18ef4e; bm_sz=5F001F09DBC38E2D43B4EE468AE40716~YAAQIFUQYOvNvbeUAQAAX53r5hrsCNUwyyW9er6xWIPcaUHLTncGTwXF8+lXC0wOp7D3rEMxOxBo2KpqUD0Q0pHvnEM3brTDDU3BEgoWDTqpRAB6srfXZbCkcsLksTXy7bN99sarvxd6CbphzPmCGAXCR1W+dThtSwViSvV43j+exlRYy2sRUnDxArs9jgl40C0DFkXwyDyxrLaIaypOryKSjzfrGoDSS4huvk6KIkv0W6gnKEVC+od/VhCr6Btwv9xWHw2Iegp1zv70I3QSVewVzBDXnWlfzxe9+qcjxKqaNsGdDTnxYYXEdNGX4FCTIxg5dMHZZ3s7dEkl92cfXha1ts5+nP+wgnCDFYCruYhFyEHgISC9jdY/K60rEzWy/dULXjxqdSoCOrc1iudgoX5HNby2w3E=~4600900~3749185",
    "YAAQIFUQYGjZNbaUAQAA8ejg2wII/b+CZoLMaoy7V3u1zOuJQinVs+C/Snqc4goUMXOniMsxsVqwBjnfOr7/BH8tZR3wZL6Q0CLL0BAl3mgk46LXS5lVKB4f8SALG4BCBI6gI7xLpgV1T/jQR41pq/pqKYXakWMU0NVIoS/0s0J07V3F7O4c3bENtWzFmCk6AaRogZVBkFZhSPnp2cCC3eqiRE6hmB9AlI1lI9PSny7LxA7u0ytXgS/G0JwGyITltQhu4B5BGyGH9rCmDjd2Oss8z4hjr/J5Zmemm0GNu4ALPwvc+SQukXO7U5S7i/mlU1g/2VMGxP79PrFRWUVOCEURsp7iDCmF30fvXtlbhLG23KQvAXNtupeEaQPvWz8el0QYuoC6zgfhTtQe8UPyN9tPUitRVeW+3nWXfyBNwH6y+RTLFfqgeifjxHS0/Jt+wykPu1irTGma; _abck=A70B1A1372DB523C7CD759C6BED9AF24~-1~YAAQIFUQYK7JqLeUAQAAeWN15g2YBycttfKHP1vxUQldTHCXhqz/BuOyZaG2F9s4jDE/ut4/8vYo/N+ZFU67ZpiIQcmfUxLIMTxl+aDt5n+az7Y0MDnWcDWAkbPYjwYHCqhVt4H91g+f64GOPOHflZJ+7WL7j8PXtfFYRktb+8W4pA1A3vgj45FoLyb37scgVDM2FvhQW2OKOhl1YAYKS2yns5c2Tpsb3YZNYPFCJ5nDZVARYaF6WsQKfx8mkz7Icb989qgKehfj8OnPNhLSfPjVKFx5tVp+TvWW220Ln2VdcZnz1JE4o+GnF7SIXaw6mmWXq19HBB5Bn+pG6DROuPgWPEtMJuUIdhXDNgMuC7h1GAAOKZfU/S+W2DkLNEg5FjaVoL9IJluvJKNu6cycMAIDGyMO6kPrIQv2H8ArR3TNUlgoL+rmKApznwwliMgl++JOYA==~-1~-1~-1; bm_s=YAAQIFUQYBHQvbeUAQAAj6vr5gK01Tp2ppypagdEAb55oEoIbiGZZmvW0d3JJhtsKIYvEz1BTyUAdvfWCa1C9v8a1+fUjxaSgepnsViEtmhHAJIaD1AppCW9rIV5ZlqtAnRmoWqppTV6drlruyhFGhGvx6a0oB4HoFzq58DeAlT3as8B9hyZoTWv6ru201MtOrWeo2bF/HUW+SC/wP/wMGAXrZP2NRxYwJ3x+hyAAjJX4xqnrQhsq5rgWU3K8rGcjPueihTUzf/NBHhGuP/yk7YI4uWQ9AT8VwT1V96AHmGsGtH53mccmG0XtgFlpC9H3B2NzCfX8YG2Cv8wa0yy/AOwOeskXLLf/H3emW/oTzS/VlLW1570UdifyTclFXU+7t4xDy1PDsY0LUpLt/v+SC+EHqnad9fwbTFvkAtVTi1q65BPFJSz21oOC3wEH6MM3vKL2HU+kjAx; bm_ss=ab8e18ef4e; bm_sz=5F001F09DBC38E2D43B4EE468AE40716~YAAQIFUQYBLQvbeUAQAAj6vr5hqVi7MHOA4S7HLQfO2IQmB3qqpJYe1v/RMmtqdqLetbb5Dq15iGwGn4Ho4qzwo+i3hKHgr1YOn6kMDSuw0M5buqSq/XxtRHzpyWS9V6zthb15Vc8TOuz9++d5b5J44mzpfEcjYtIgqAvYiVCtu2jN6PRBJO+5zTEVMF/zfjE0rGjH4dLDxmkwEaXRvodSsK34kHiJPWhfFAaK4+vD6aVnd0jid/fjUsrn8Wgu4OJmJ1Dyxia1Cil3Tf/LRtX2/M90KRFmo9CFtSMlyj34C8VGUyseTao0EjR32fWVBF++i00WgN5/82HqmKPMOmDZ5RbVWPm7iL0JgvQnIoowfkrYSLgHOLSYq5MSCl21yAEh68/ngZQQJerkmOAyAVT+qBhn0XUkkZ46qaIQ==~4600900~3749185",
    "YAAQIFUQYGjZNbaUAQAA8ejg2wII/b+CZoLMaoy7V3u1zOuJQinVs+C/Snqc4goUMXOniMsxsVqwBjnfOr7/BH8tZR3wZL6Q0CLL0BAl3mgk46LXS5lVKB4f8SALG4BCBI6gI7xLpgV1T/jQR41pq/pqKYXakWMU0NVIoS/0s0J07V3F7O4c3bENtWzFmCk6AaRogZVBkFZhSPnp2cCC3eqiRE6hmB9AlI1lI9PSny7LxA7u0ytXgS/G0JwGyITltQhu4B5BGyGH9rCmDjd2Oss8z4hjr/J5Zmemm0GNu4ALPwvc+SQukXO7U5S7i/mlU1g/2VMGxP79PrFRWUVOCEURsp7iDCmF30fvXtlbhLG23KQvAXNtupeEaQPvWz8el0QYuoC6zgfhTtQe8UPyN9tPUitRVeW+3nWXfyBNwH6y+RTLFfqgeifjxHS0/Jt+wykPu1irTGma; _abck=A70B1A1372DB523C7CD759C6BED9AF24~-1~YAAQIFUQYK7JqLeUAQAAeWN15g2YBycttfKHP1vxUQldTHCXhqz/BuOyZaG2F9s4jDE/ut4/8vYo/N+ZFU67ZpiIQcmfUxLIMTxl+aDt5n+az7Y0MDnWcDWAkbPYjwYHCqhVt4H91g+f64GOPOHflZJ+7WL7j8PXtfFYRktb+8W4pA1A3vgj45FoLyb37scgVDM2FvhQW2OKOhl1YAYKS2yns5c2Tpsb3YZNYPFCJ5nDZVARYaF6WsQKfx8mkz7Icb989qgKehfj8OnPNhLSfPjVKFx5tVp+TvWW220Ln2VdcZnz1JE4o+GnF7SIXaw6mmWXq19HBB5Bn+pG6DROuPgWPEtMJuUIdhXDNgMuC7h1GAAOKZfU/S+W2DkLNEg5FjaVoL9IJluvJKNu6cycMAIDGyMO6kPrIQv2H8ArR3TNUlgoL+rmKApznwwliMgl++JOYA==~-1~-1~-1; bm_s=YAAQIFUQYIjSvbeUAQAAhrrr5gJm5HgCO8j7a9Vb4FluVOmTyMKQDxquI71s7OJ0lyQo95uWfzKdVM6zgOML7IS3u9M4czpvnFtCra2L+GcQsyjWmfEFkzAbAyL3ZLvKxVnNa4Y/PETME1eA2hJN88yTPhgScr6M2fIoK2dD6vl4RJUqlJPuPplF66thtX0oov18c0THjteVpvH88tF1TBedB5ticHMSIv/dE3QIvUjAKE6BtpmkY1IhZ4T0kyfPCumBpW9OyAVDDKrexKLI79Yi6+yfaa1pQl9XY7LI3kb6uL3j43R7iEQZGCLcSvnQVzK1ZQVS+Z2IWVDJltQSZEDJNQcpueezEFzG2/DTwt4yzEzU1IhfyZ0+g6weOkUYKqMny2KbKLOWVR/bVh2xCzEgsaLJq/uY+jBGokfloeaHIztJJRZUDTge25qClDIgDhNpyeF98Ha5; bm_ss=ab8e18ef4e; bm_sz=5F001F09DBC38E2D43B4EE468AE40716~YAAQIFUQYInSvbeUAQAAhrrr5ho5ku/RR3li+mQDFvQquYUCLFSDLv8nOEWb5KNS2UplUje2JcwgbxcRaPYB7oQclB0pnFBidzfcwZdpu1jAmgs7M3KFuYGCWwAWJozJV1rhRmlDMtNALMstxgHQruDGdzvqk1GgVINQ2/93wyZwqvJkq6ZQ4FWupFcise6SKiSc86qeaDhHAh3EWAZXN/mkfN4mfrw4RWH3CIHrMAuTaidxlpANVK+gSpL2zcDFH+Ctp4DSG/ftN2YET4zTDtzPFgfzjnS84l7/0M8e0HkYV9wniOwfHVAl3HId+D7hHYr035yczqJGuDjfHuxN/PVaz10eVQ1bzfINf2g3xNipXF+8aZ4Z3jCzyDDiS1vgEDgB36z3DEv/0KVONc85M7ArDy/fgTtx5NET9/bwUAFM~4600900~3749185",
    "YAAQIFUQYGjZNbaUAQAA8ejg2wII/b+CZoLMaoy7V3u1zOuJQinVs+C/Snqc4goUMXOniMsxsVqwBjnfOr7/BH8tZR3wZL6Q0CLL0BAl3mgk46LXS5lVKB4f8SALG4BCBI6gI7xLpgV1T/jQR41pq/pqKYXakWMU0NVIoS/0s0J07V3F7O4c3bENtWzFmCk6AaRogZVBkFZhSPnp2cCC3eqiRE6hmB9AlI1lI9PSny7LxA7u0ytXgS/G0JwGyITltQhu4B5BGyGH9rCmDjd2Oss8z4hjr/J5Zmemm0GNu4ALPwvc+SQukXO7U5S7i/mlU1g/2VMGxP79PrFRWUVOCEURsp7iDCmF30fvXtlbhLG23KQvAXNtupeEaQPvWz8el0QYuoC6zgfhTtQe8UPyN9tPUitRVeW+3nWXfyBNwH6y+RTLFfqgeifjxHS0/Jt+wykPu1irTGma; _abck=A70B1A1372DB523C7CD759C6BED9AF24~-1~YAAQIFUQYK7JqLeUAQAAeWN15g2YBycttfKHP1vxUQldTHCXhqz/BuOyZaG2F9s4jDE/ut4/8vYo/N+ZFU67ZpiIQcmfUxLIMTxl+aDt5n+az7Y0MDnWcDWAkbPYjwYHCqhVt4H91g+f64GOPOHflZJ+7WL7j8PXtfFYRktb+8W4pA1A3vgj45FoLyb37scgVDM2FvhQW2OKOhl1YAYKS2yns5c2Tpsb3YZNYPFCJ5nDZVARYaF6WsQKfx8mkz7Icb989qgKehfj8OnPNhLSfPjVKFx5tVp+TvWW220Ln2VdcZnz1JE4o+GnF7SIXaw6mmWXq19HBB5Bn+pG6DROuPgWPEtMJuUIdhXDNgMuC7h1GAAOKZfU/S+W2DkLNEg5FjaVoL9IJluvJKNu6cycMAIDGyMO6kPrIQv2H8ArR3TNUlgoL+rmKApznwwliMgl++JOYA==~-1~-1~-1; bm_s=YAAQIFUQYIbkvbeUAQAAwB/s5gKNCzCeY+ARceWpqw7cNvfvzitz8H6xT0EavtEEVaLkDKva+eYUw9+XJrxmVDGOU8oae7j7W9KJTn1V+rIxUo6kcco1w8DTdTpRXF7rYxptie4vw8zd4ifeaj/bde+YSICl02DRa4bHcd6dxZTHKLPep6LfOIbu9cjVJl3RhTSe8fs+SBHwV2wBay7IQdlZomncXMHrs7eiobmF72v8aLQINT9jvCHdCwt7ZZnlsUItJtImcJxA6ven8rmMk8yi0ScVFvOIYnopX7mDyAimrfAp5RonVGZ7psV1Pj+JrzkoNbhVTC29sEkdMBYaW8Vz28TFq3wvv/nhfqHKYaKKP+7k1vMA49y78K/h+CBJisFXhql9Q/DxSVEBv0gmVDlX3LvZW5BOI0vOHjkB5RaI56pEMBQLCRkMDGVZZ8/Uw6z6Ep+C/g/J; bm_ss=ab8e18ef4e; bm_sz=5F001F09DBC38E2D43B4EE468AE40716~YAAQIFUQYIfkvbeUAQAAwB/s5hq8OMWuwVuomjFKkyuBg9PfCgX8DheCbAuIwJ/LVGuiXScJ0Ne3qsF02qXasQpdenheeXfHaujLQeXKGjzXOk0Do4+3cwGCaS5eUx429ZtSKZCBgxBVIMBn2fY2tk9FYAlRAcyycU27RXfPfEa39VrV0oLj2FcUcRQfZS+t+02DEklQkcg2wY72ugp70mutvxmNBoYyVEM2XJ9GxNEuyw8cxrU67rDF49bTwo4MDYIb6elIB7UxKm2ipD3h0pRHrYktuM+KC5dPzGTjpEZMJ9bFkOfFHczXjgMUhq6I5DqefOISguVvT5eZi42dKVIifCVDFGCehRDeeB15pHgflKfBI32i476PK/MQ6Y4Fto4RbspQ9zp5jcLQz2pQtWthC1W1onDMZsqA1/eKBgAdBGgmjehpvkRiC99+gzedzFK2ULMUC+Dn3Zs=~4600900~3749185",
    "YAAQIFUQYGjZNbaUAQAA8ejg2wII/b+CZoLMaoy7V3u1zOuJQinVs+C/Snqc4goUMXOniMsxsVqwBjnfOr7/BH8tZR3wZL6Q0CLL0BAl3mgk46LXS5lVKB4f8SALG4BCBI6gI7xLpgV1T/jQR41pq/pqKYXakWMU0NVIoS/0s0J07V3F7O4c3bENtWzFmCk6AaRogZVBkFZhSPnp2cCC3eqiRE6hmB9AlI1lI9PSny7LxA7u0ytXgS/G0JwGyITltQhu4B5BGyGH9rCmDjd2Oss8z4hjr/J5Zmemm0GNu4ALPwvc+SQukXO7U5S7i/mlU1g/2VMGxP79PrFRWUVOCEURsp7iDCmF30fvXtlbhLG23KQvAXNtupeEaQPvWz8el0QYuoC6zgfhTtQe8UPyN9tPUitRVeW+3nWXfyBNwH6y+RTLFfqgeifjxHS0/Jt+wykPu1irTGma; _abck=A70B1A1372DB523C7CD759C6BED9AF24~-1~YAAQIFUQYK7JqLeUAQAAeWN15g2YBycttfKHP1vxUQldTHCXhqz/BuOyZaG2F9s4jDE/ut4/8vYo/N+ZFU67ZpiIQcmfUxLIMTxl+aDt5n+az7Y0MDnWcDWAkbPYjwYHCqhVt4H91g+f64GOPOHflZJ+7WL7j8PXtfFYRktb+8W4pA1A3vgj45FoLyb37scgVDM2FvhQW2OKOhl1YAYKS2yns5c2Tpsb3YZNYPFCJ5nDZVARYaF6WsQKfx8mkz7Icb989qgKehfj8OnPNhLSfPjVKFx5tVp+TvWW220Ln2VdcZnz1JE4o+GnF7SIXaw6mmWXq19HBB5Bn+pG6DROuPgWPEtMJuUIdhXDNgMuC7h1GAAOKZfU/S+W2DkLNEg5FjaVoL9IJluvJKNu6cycMAIDGyMO6kPrIQv2H8ArR3TNUlgoL+rmKApznwwliMgl++JOYA==~-1~-1~-1; bm_s=YAAQIFUQYKV1vreUAQAAjmHv5gK7YJrhPnym1Au65moRtaZEJ28BWfhZaFM/gGoWXfP4eZHPT2koRdDToU9P3OIM1lN2E5Q6ZLyMZVa2F3BZZ/9QfQ9br+qGeCXlSUUIQ9rDuN2tZA+g/Vsm3yUG0lDwKPG2PEqwvkbA2TIS7GQLmKcq3yzyDaypZ6mVupvHYuZdTfxU/ydcqvqSD4jvXLeba99JcSfwYxbaSlKAlSAwygz9/2whneCL0IWKo2dL90SUiiyoEsxFv53in0ajAFw9xur1CoqUbQiHlau/kCmoG38P6CcxkFxwMlgt5mAC41kktgfMoGli7vTJo6bMxQZVUSqI0NKRbejqLrbbBci4vNVegIrTSC3G/RXD1pIVK+Z/xhmvRWZX31GLwGidDIkBvzwp/q28Iax4Lg1iZBzbJvHFq87cjefTABEldbfbVVdfvmu1PodX; bm_ss=ab8e18ef4e; bm_sz=5F001F09DBC38E2D43B4EE468AE40716~YAAQIFUQYKZ1vreUAQAAjmHv5hqqoIfRjbh+VIi2sAgtQX2vtN6igkrWuMhxhEkRYA0/4RXpsJ227+OXXZk3yglTIy2261HEd/XInQCLJ3xeq536YAX7veR2ZGgEvgUj2orXtNAw8kS6AMEMOZBOBpcXihMSAhJpVHyX6yl27+0pSYS6Oe3LFggeuKsHLFZelYKp/i8LuhsTnaAs+E5Qcz3KaVtDkmixNljLvJy6Hxmb5AyvldkyrbYxAjSG6o9QLf/DhpN5RLZP+Yo0CKldcEIKCZ7qj3unLVtHo/tnh6b+7Uk3JQE38V1vmTTU/uAxHe+76H2PZpZjS3dAyXLG7y1LeY9tIxL0Y1/BLheFyU9dR7yujUc/jR2TXfZypXwo9bE1IjBov74MNGfyCR0xIj8lISF0ZvySNJNd9elIBU0V6R8k9TWC0fdrS9nfNrGqFa5ib+E3fAQzwAA3aiDG6kqd~4600900~3749185",
    "YAAQIFUQYGjZNbaUAQAA8ejg2wII/b+CZoLMaoy7V3u1zOuJQinVs+C/Snqc4goUMXOniMsxsVqwBjnfOr7/BH8tZR3wZL6Q0CLL0BAl3mgk46LXS5lVKB4f8SALG4BCBI6gI7xLpgV1T/jQR41pq/pqKYXakWMU0NVIoS/0s0J07V3F7O4c3bENtWzFmCk6AaRogZVBkFZhSPnp2cCC3eqiRE6hmB9AlI1lI9PSny7LxA7u0ytXgS/G0JwGyITltQhu4B5BGyGH9rCmDjd2Oss8z4hjr/J5Zmemm0GNu4ALPwvc+SQukXO7U5S7i/mlU1g/2VMGxP79PrFRWUVOCEURsp7iDCmF30fvXtlbhLG23KQvAXNtupeEaQPvWz8el0QYuoC6zgfhTtQe8UPyN9tPUitRVeW+3nWXfyBNwH6y+RTLFfqgeifjxHS0/Jt+wykPu1irTGma; _abck=A70B1A1372DB523C7CD759C6BED9AF24~-1~YAAQIFUQYK7JqLeUAQAAeWN15g2YBycttfKHP1vxUQldTHCXhqz/BuOyZaG2F9s4jDE/ut4/8vYo/N+ZFU67ZpiIQcmfUxLIMTxl+aDt5n+az7Y0MDnWcDWAkbPYjwYHCqhVt4H91g+f64GOPOHflZJ+7WL7j8PXtfFYRktb+8W4pA1A3vgj45FoLyb37scgVDM2FvhQW2OKOhl1YAYKS2yns5c2Tpsb3YZNYPFCJ5nDZVARYaF6WsQKfx8mkz7Icb989qgKehfj8OnPNhLSfPjVKFx5tVp+TvWW220Ln2VdcZnz1JE4o+GnF7SIXaw6mmWXq19HBB5Bn+pG6DROuPgWPEtMJuUIdhXDNgMuC7h1GAAOKZfU/S+W2DkLNEg5FjaVoL9IJluvJKNu6cycMAIDGyMO6kPrIQv2H8ArR3TNUlgoL+rmKApznwwliMgl++JOYA==~-1~-1~-1; bm_s=YAAQIFUQYCWGvreUAQAAsbnv5gJ7pTNDsBJFmKQ7Imp34inaQUBEU+yScJAbn7sS23aGFBPwgxHA10KH7PFI2hVUylpC+U8j67mJlW60rpmYY6OS7EcV0nyd0OV1p8hDevFzvNWC30Kr+P76ie0FgtFS6Lj197OfcCn4aXtqKSHIRPuLbVmlO6N51VBokKTr0/Swc8QEXaSsX6p/+7TTZrFo+G9bedmlKuNODRI+awz91FwX9WvbqQGvqoDlXyx/M+OFELYk/rMN+/d0t57HwjC5B5plHAX7kCpGNXyHk0hXIABhLBrChn6NEKAXy6qiNAIC50w8j6ZYAodBTlBeGpU423qTfIrkydgfVzUtYt0DtfdiI6oUOvUUEZvLQl84UCS2E93zDZENuWtTklg8A3SohnOwRFoitO5P0/5JyuNPXg7klvvDe5ni1cEe7jlrJ1myq9LRGLiF; bm_ss=ab8e18ef4e; bm_sz=5F001F09DBC38E2D43B4EE468AE40716~YAAQIFUQYCaGvreUAQAAsbnv5hqMyZP4Z1tPJVhUNGzBxDFWLXgwSI0ObK14wQmAkHy/XZV8Z/JicyKhuKR4d1OMLXtkZGh3u7OKG9+8v9z5WGaGK5Q7DIm0AzRglzZtGw12/araaeT5CrMq6OmTmU2pxcu+zgvHlhVJrF/w70AT+70sM79AUDqPNQGwpQo+P5+leV6IDC7id/Pkgmx9JqvgQrIw/ubZ9gs7sTCxdFaQMCY9dKT8s7/Y7+POiBwFwJ9O6zbEb3iW7qZ9pBvQFIGw2fHnXK1+oNLHNYQns9vAZfop953GqOCPm2L/Wf/Ahnnn7b/P7N0Esb/iWnnGywA7XBCRMM6jNsOBZTMubSrQw+pzk9HTpLr/h6sg5vX2XBBKSempQWNRLECFp2/5fTNHLGlIeOwOY+wz+b7RSSIkQB+hyOBUKENkJeJT+Azm4o039XuxzksU7+Zqj1RcGRq78teJd4qq~4600900~3749185",
    "YAAQIFUQYGjZNbaUAQAA8ejg2wII/b+CZoLMaoy7V3u1zOuJQinVs+C/Snqc4goUMXOniMsxsVqwBjnfOr7/BH8tZR3wZL6Q0CLL0BAl3mgk46LXS5lVKB4f8SALG4BCBI6gI7xLpgV1T/jQR41pq/pqKYXakWMU0NVIoS/0s0J07V3F7O4c3bENtWzFmCk6AaRogZVBkFZhSPnp2cCC3eqiRE6hmB9AlI1lI9PSny7LxA7u0ytXgS/G0JwGyITltQhu4B5BGyGH9rCmDjd2Oss8z4hjr/J5Zmemm0GNu4ALPwvc+SQukXO7U5S7i/mlU1g/2VMGxP79PrFRWUVOCEURsp7iDCmF30fvXtlbhLG23KQvAXNtupeEaQPvWz8el0QYuoC6zgfhTtQe8UPyN9tPUitRVeW+3nWXfyBNwH6y+RTLFfqgeifjxHS0/Jt+wykPu1irTGma; _abck=A70B1A1372DB523C7CD759C6BED9AF24~-1~YAAQIFUQYK7JqLeUAQAAeWN15g2YBycttfKHP1vxUQldTHCXhqz/BuOyZaG2F9s4jDE/ut4/8vYo/N+ZFU67ZpiIQcmfUxLIMTxl+aDt5n+az7Y0MDnWcDWAkbPYjwYHCqhVt4H91g+f64GOPOHflZJ+7WL7j8PXtfFYRktb+8W4pA1A3vgj45FoLyb37scgVDM2FvhQW2OKOhl1YAYKS2yns5c2Tpsb3YZNYPFCJ5nDZVARYaF6WsQKfx8mkz7Icb989qgKehfj8OnPNhLSfPjVKFx5tVp+TvWW220Ln2VdcZnz1JE4o+GnF7SIXaw6mmWXq19HBB5Bn+pG6DROuPgWPEtMJuUIdhXDNgMuC7h1GAAOKZfU/S+W2DkLNEg5FjaVoL9IJluvJKNu6cycMAIDGyMO6kPrIQv2H8ArR3TNUlgoL+rmKApznwwliMgl++JOYA==~-1~-1~-1; bm_s=YAAQIFUQYNSRvreUAQAAmQHw5gI3plDiXw4w/7AQw90VcDPMmfLOrkzKacRcFM06W8nhjMDT1JpPaKdfhvL6mDsgIvpkex5jcV37gJ/yNxxbmFA+mkZB3Iagoi/SMcr7NLa12KshaE8eNHyYLGm8hSaKcGUuv/eb33fsZE7lhjIXY0wnVuHSs5gLCWJd2ZRaIlvxzMz510ziofA3gfFlnJPQ9216ZUAxExzu6J7QSdoe2c93VOjWDpg4Nwn1TD0nzxkAGt/+C67QezLRjniZo4cGz0y73i+L+D8Wi8/EcwBFXfkwnAsTevx2h54Gz0vpka0A4Tom1NfpLn2Sr3T9MMGiWhapH33oJCcMOzUEq+CzIBMtqqFFgVRPcIdsEgu5WsFX64FW7jWt1hgduagfFtArJcHYZ0aFj5UMz6SHAwM8gAJAkpiSdTvTZs7YKIdwBH3iD6fzSCcl; bm_ss=ab8e18ef4e; bm_sz=5F001F09DBC38E2D43B4EE468AE40716~YAAQIFUQYNWRvreUAQAAmQHw5hr/U7/ohrdn7OF+BweIH8vk711vm32fvqZ1UsqFt8SEzyyy1/tzn9fIx5UKMwUGc9s6Ny+cUYgXmVtyPLykWkVUA7LK8cwzgqjNtZ77XYW57fbz9ZY1q1hrHax+ikZhDllEIxCKlsd2gonrljfbu+dcIBwcdj22gW2H05TG7NCiyK5Qb1Q7inawoQ/t21dN/6Ajz9HnXhTKQUuQuh343cwZwT+DFMhYauuDczhC73WpaVpIhJYXzknRVghZYNuo2RN9cRubTWVmTFN1ongFcILPzoAzk08STTdaYP8U1lYI2fRKEweEDDUNaX58dFPW7yUIGRwvDTJO+daiPhxO4Hmq31E65wl3F0vDtYb1VxE/mupWvJ+04FCLYh55JX9ethOAjNqlZq3eADZH6Fpzd8Z2H/PXJgFR2FyieqX4xhSe+HoR1Ll380nMES8X/67AFLxIPemE0nfhF3Sc~4600900~3749185"
]

// variables que manejan que página se llama de la API junto con variable donde se almacenan los datos
const maxIterations = 50;
let currentIteration = 1;
let globalResponses = [];

// función para asignar una cookie aleatoria para la llamada del array de cookies
function randomCookieSetter(){
    let randomNumCookie = Math.floor(Math.random() * cookies.length);
    let coll = require('./postman_scrapG2A/G2A_API.postman_collection.json');
    coll.item[0].request.header[1].value = cookies[randomNumCookie];
    return
}

// función para obtener un número de milisegundos aleatorio para dejar tiempo entre llamadas
function randomNumber(){
    let randomNum = Math.floor((Math.random() * 4000) + 1500);
    return randomNum;
}

function runIteration(){
    let env = require('./postman_scrapG2A/G2A_Env.postman_environment.json');
    // se asigna la página a la que se va a lanzar la llamada
    env.values[0].value = currentIteration;
    // se asigna una cookie aleatoria para la llamada
    randomCookieSetter();
    console.log("obteniendo datos de página: ",env.values[0].value);
    // se lanza la llamada
    newman.run({
            collection: require('./postman_scrapG2A/G2A_API.postman_collection.json'),
            environment: env,
            iterationCount: 1
        })
        // una vez realizada la llamada
        .on('done', function (err, summary){
            if (err) {
                console.error("Error al ejecutar la colección:", err);
                return
            }

            summary.run.executions.forEach(exec => {
                if (exec.response && exec.response.stream) {
                    try {
                        const responseBody = JSON.parse(exec.response.stream.toString());
                        if (responseBody.data && Array.isArray(responseBody.data.items)) {
                            // filtrado de los datos que se terminarán añadiendo a la variable globalResponses
                            responseBody.data.items.forEach(item => {
                                let resultantName = item.name.replace(" PC", "")
                                let resultantBasePrice = item.price.amount + " €"
                                if (!item.path.includes("account")){
                                    globalResponses.push({
                                        pagina: currentIteration,
                                        path: item.path,
                                        name: resultantName,
                                        basePrice: resultantBasePrice
                                    })
                                }
                            })
                        }
                    } catch (error) {
                        console.error(`Error procesando respuesta de ${exec.item.name}:`, error);
                        const contentType = exec.response.headers.get('Content-Type');
                        const responseText = exec.response.stream.toString();
                        if (!contentType.includes('application/json')) {
                            console.error(`Respuesta no JSON en ${exec.item.name}:`, responseText.substring(0, 100));
                            return;
                        }
                    }
                }
            })
            console.log(`Iteración ${currentIteration} completada.`);
            // aumento del contador de página y validación de si se debe esperar o no
            currentIteration++;
            if (currentIteration <= maxIterations) {
                setTimeout(runIteration, randomNumber())
            }
            // en caso de haber llegado a la última iteración se crea el nuevo archivo json
            else {
                fs.writeFileSync('responses.json', JSON.stringify(globalResponses, null, 2), 'utf8');
                console.log('Archivo responses.json generado con los datos filtrados.');
            }
        })

}

runIteration()
